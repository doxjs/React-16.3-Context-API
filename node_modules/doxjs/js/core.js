import { isArray } from './utils';
export function push(...items) {
    return Array.prototype.push.call(this, ...items);
}
export function pop() {
    return Array.prototype.pop.call(this);
}
export function shift() {
    return Array.prototype.shift.call(this);
}
export function unshift(...items) {
    return Array.prototype.unshift.call(this, ...items);
}
export function splice(start = 0, deleteCount = 0, ...append) {
    return Array.prototype.splice.call(this, start, deleteCount, ...append);
}
export function reverse() {
    return Array.prototype.reverse.call(this);
}
export function sort(compareFn) {
    return Array.prototype.sort.call(this, compareFn);
}
export function map(callbackfn) {
    return Array.prototype.map.call(this, callbackfn);
}
export function forEach(callbackfn) {
    //console.log(this);
    return Array.prototype.forEach.call(this, callbackfn);
}
export function every(callbackfn) {
    return Array.prototype.every.call(this, callbackfn);
}
export function some(callbackfn) {
    return Array.prototype.some.call(this, callbackfn);
}
export function filter(callbackfn) {
    return Array.prototype.filter.call(this, callbackfn);
}
export function reduce(callbackfn, initialValue) {
    return Array.prototype.reduce.call(this, callbackfn, initialValue);
}
export function concat(...items) {
    items.forEach(item => {
        if (isArray(item)) {
            item.forEach(i => {
                this.push(i);
            });
        }
        else {
            this.push(item);
        }
    });
    return this;
}
export function join(separator) {
    return Array.prototype.join.call(this, separator);
}
export const methods = ["push", "pop", "shift", "unshift", "splice", "reverse", "sort", "map", "forEach", "every", "some", "filter", "reduce", "concat", "join"];
//# sourceMappingURL=core.js.map